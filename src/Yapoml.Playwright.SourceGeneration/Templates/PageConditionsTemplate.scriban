[global::System.Runtime.CompilerServices.CompilerGenerated]
public partial class Conditions : global::Yapoml.Playwright.Components.BasePageConditions<Conditions>
{
	public Conditions(global::System.TimeSpan timeout, global::System.TimeSpan pollingInterval, global::Microsoft.Playwright.IPage driver, global::Yapoml.Playwright.Services.Locator.IElementHandlerRepository elementHandlerRepository, global::Yapoml.Playwright.Services.Locator.IElementLocator elementLocator, global::Yapoml.Playwright.Components.Metadata.PageMetadata pageMetadata, global::Yapoml.Playwright.Events.IEventSource eventSource, global::Yapoml.Framework.Logging.ILogger logger, global::Yapoml.Framework.Options.ISpaceOptions spaceOptions)
		: base(timeout, pollingInterval, driver, elementHandlerRepository, elementLocator, pageMetadata, eventSource, logger, spaceOptions)
	{
		base._self = this;
	}

	{{ if $1.url && $1.url.segments == null && $1.url.params == null }}
	/// <summary>
	/// Expect that current url contains <c>{{ $1.url.path }}</c>.
	///
	/// Evaluates document's state to be <c>complete</c> which means the page is fully loaded.
	/// It doesn't guarantee that some components on the page are present, they might be rendered dynamically.
	/// </summary>
	public override Conditions IsOpened(global::System.TimeSpan? timeout = default)
	{
		using (var scope = Logger.BeginLogScope("Expect the {{$1.name}} page is opened"))
		{
			return scope.Execute(() =>
			{
				Url.Contains("{{ $1.url.path }}", timeout);

				return base.IsOpened(timeout);
			});
		}
	}
	{{ end }}

	{{ for component in $1.components }}
	{{if !component.is_plural && component.by.segments == null }}
	public global::{{component.namespace}}.{{get_component_return_type component}}.ChainConditions {{component.name}}
	{
		get
		{
			if (ElementHandlerRepository.TryGet("{{component.name}}", out var cachedElementHandler))
			{
				return new global::{{component.namespace}}.{{get_component_return_type component}}.ChainConditions(Timeout, PollingInterval, Driver, cachedElementHandler, ElementLocator, EventSource, Logger, SpaceOptions);
			}
			else
			{
				var byValue = "{{ escape component.by.value }}";

				{{ include 'ByTemplate' component }}

				var metadata = new global::Yapoml.Playwright.Components.Metadata.ComponentMetadata() { Name = "{{component.original_name}}" };
				var elementHandler = new global::Yapoml.Playwright.Services.Locator.ElementHandler(Driver, null, ElementLocator, by, byFrom, metadata, ElementHandlerRepository.CreateNestedRepository(), EventSource);
			
				ElementHandlerRepository.Set("{{component.name}}", elementHandler);

				return new global::{{component.namespace}}.{{get_component_return_type component}}.ChainConditions(Timeout, PollingInterval, Driver, elementHandler, ElementLocator, EventSource, Logger, SpaceOptions);
			}
		}
	}
	{{ else if component.is_plural && component.by.segments == null }}
	public global::{{component.namespace}}.{{get_component_return_type component}}List.Conditions {{component.name}}
	{
		get
		{
			var byValue = "{{ escape component.by.value }}";

			{{ include 'ByTemplate' component }}
				
			var metadata = new global::Yapoml.Playwright.Components.Metadata.ComponentMetadata() { Name = "{{singularize(component.original_name)}}" };
			var listMetadata = new global::Yapoml.Playwright.Components.Metadata.ComponentsListMetadata() { Name = "{{component.original_name}}", ComponentMetadata = metadata };
			var elementsListHandlerFactory = SpaceOptions.Services.Get<global::Yapoml.Playwright.Services.Factory.IElementsListHandlerFactory>();
			var elementsListHandler = elementsListHandlerFactory.Create(Driver, null, ElementLocator, by, byFrom, listMetadata, ElementHandlerRepository.CreateNestedRepository(), EventSource);
			
			return new global::{{component.namespace}}.{{component.singular_name}}ComponentList.Conditions(Timeout, PollingInterval, Driver, elementsListHandler, ElementLocator, EventSource, Logger, SpaceOptions);
		}
	}
	{{ end }}
	{{ end }}
}